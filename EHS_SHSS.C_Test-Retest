#################################################
### Test-Retest Reliability of EHS and SHSS:C ###
#################################################

### CONTENTS: ###

# I.   Packages, set-up & demographics
# II.  Test-retest correlation with bootstrapped 95% CIs  's
# III. T-test reassessment t-test
# IV.  T-test for scale equivalence
# V.   T-test pleasantness
# VI.  Test-retest difference graph

##########################################
### I. Packages, set-up & descriptives ###
##########################################

##Required packages
require(psych)        #For describe
require(rio)          #For import_list
require(boot)         #For boot, boot.ci
require(bootES)       #For cohen.d
require(dplyr)        #For shapiro.test 
require(car)          #For residualsPlot 
require(lmtest)       #For bptest
require(effsize)      #For cohen.d
require(ggplot2)      #For ggplot

##Make workspace nice and tidy
rm(list=ls())

### Load data

############## If actual data is available
setwd("C:/MyWorkingDirectory/")                ##Set WD path to the directory containing Test_Retest.xlsx

##Import all 4 worksheets
Worksheets <- import_list("Test-retest_FINAL.xlsx")

#
nEHS <-  nrow(Worksheets$EHS)
nSHSS <- nrow(Worksheets$SHSS)

##Separate the worksheets
EHS_Data <- (Worksheets$EHS[4:nEHS,])   
SHSS_Data <- (Worksheets$SHSS[4:nSHSS,])     
EHS_Data <- subset(EHS_Data, EHS_Data$EHS_total_score_session2!="NA")
SHSS_Data <- subset(SHSS_Data, SHSS_Data$SHSS_total_score_session2!="NA")





    ########## Data simulation if no actual data is available
    ########## DONT USE IF ACTUAL DATA IS AVAILABLE
    ### parameters and assumptions
    n_per_session = 60
    SD_hypnotizability = 2.7
    SD_pleasantness = 1.5
    dropout_rate = 0.1
    dropouts = sample(n_per_session, 10, replace = F)
    
    # effects in hypnotizability
    
    expected_test_retest_correlation = 0.8
    time_effect = 0
    scale_effect = 0
    
    expected_mean_SHSS = 5
    expected_mean_EHS = expected_mean_SHSS - scale_effect
    
    # effects in pleasantness
    expected_pleasantness_correlation = 0.8
    
    time_effect_pleasantness = 0
    scale_effect_pleasantness = 1
    
    expected_mean_SHSS_pleasantness = 5
    expected_mean_EHS_pleasantness = expected_mean_SHSS_pleasantness - scale_effect_pleasantness
    
    
    
    # simulate some data
    SHSS_hypnotizability_pre = mvrnorm(n = n_per_session, mu = c(0, 0), Sigma = matrix(c(1, expected_test_retest_correlation, expected_test_retest_correlation, 1), 2, 2))
    EHS_hypnotizability_pre = mvrnorm(n = n_per_session, mu = c(0, 0), Sigma = matrix(c(1, expected_test_retest_correlation, expected_test_retest_correlation, 1), 2, 2))
    
    SHSS_hypnotizability = round(SHSS_hypnotizability_pre * SD_hypnotizability + expected_mean_SHSS)
    SHSS_hypnotizability[,2] = SHSS_hypnotizability[,2] + time_effect
    SHSS_hypnotizability[SHSS_hypnotizability < 0] = 0
    SHSS_hypnotizability[SHSS_hypnotizability > 12] = 12
    
    EHS_hypnotizability = round(EHS_hypnotizability_pre * SD_hypnotizability + expected_mean_EHS)
    EHS_hypnotizability[,2] = EHS_hypnotizability[,2] + time_effect
    EHS_hypnotizability[EHS_hypnotizability < 0] = 0
    EHS_hypnotizability[EHS_hypnotizability > 12] = 12
    
    
    SHSS_pleasantness_pre = mvrnorm(n = n_per_session, mu = c(0, 0), Sigma = matrix(c(1, expected_pleasantness_correlation, expected_pleasantness_correlation, 1), 2, 2))
    EHS_pleasantness_pre = mvrnorm(n = n_per_session, mu = c(0, 0), Sigma = matrix(c(1, expected_pleasantness_correlation, expected_pleasantness_correlation, 1), 2, 2))
    
    SHSS_pleasantness = round(SHSS_pleasantness_pre * SD_hypnotizability + expected_mean_SHSS_pleasantness)
    SHSS_pleasantness[,2] = SHSS_pleasantness[,2] + time_effect_pleasantness
    SHSS_pleasantness[SHSS_pleasantness < 1] = 1
    SHSS_pleasantness[SHSS_pleasantness > 10] = 10
    EHS_pleasantness = round(EHS_pleasantness_pre * SD_hypnotizability + expected_mean_EHS_pleasantness)
    EHS_pleasantness[,2] = EHS_pleasantness[,2] + time_effect_pleasantness
    EHS_pleasantness[EHS_pleasantness < 0] = 0
    EHS_pleasantness[EHS_pleasantness > 12] = 12
    
    # simulate Age
    Age_SHSS = round(rnorm(mean = 19, sd = 1, n = n_per_session))
    Age_EHS = round(rnorm(mean = 19, sd = 1, n = n_per_session))
    
    # simulate etnicity
    Race_SHSS = sample(c("Asian", "Black or African American", "White", "Other"), n_per_session, replace = T)
    Race_EHS = sample(c("Asian", "Black or African American", "White", "Other"), n_per_session, replace = T)
    
    # introduce dropouts by second session
    SHSS_hypnotizability[dropouts,2] = NA
    SHSS_pleasantness[dropouts,2] = NA
    EHS_hypnotizability[dropouts,2] = NA
    EHS_pleasantness[dropouts,2] = NA
    
    # compile simulated datafiles
    SHSS_Data = as.data.frame(Age_SHSS)
    SHSS_Data = cbind(SHSS_Data, Race_SHSS, SHSS_hypnotizability, SHSS_pleasantness)
    names(SHSS_Data) = c("Age", "Race", "SHSS_total_score_session1", "SHSS_total_score_session2", "SHSS_Pleasantness_1_overall_session1", "SHSS_Pleasantness_1_overall_session2")
    SHSS_Data[,"Race"] = as.character(SHSS_Data[,"Race"])
    
    EHS_Data = as.data.frame(Age_EHS)
    EHS_Data = cbind(EHS_Data, Race_EHS, EHS_hypnotizability, EHS_pleasantness)
    names(EHS_Data) = c("Age", "Race", "EHS_total_score_session1", "EHS_total_score_session2", "EHS_Pleasantness_1_overall_session1", "EHS_Pleasantness_1_overall_session2")
    EHS_Data[,"Race"] = as.character(EHS_Data[,"Race"])
    
    ########## END OF SIMULATION CODE

##Demographics

##Create summary function
    summary.function <- function(x) {
      cbind(freq = table(x), 
            percentage = round(prop.table(table(x))*100, 2))
    }
    
##Age
age_Both <- as.numeric(c(EHS_Data$Age, SHSS_Data$Age))

describe(as.numeric(EHS_Data$Age))
describe(as.numeric(SHSS_Data$Age))
describe(age_Both)

t.test(as.numeric(EHS_Data$Age), as.numeric(SHSS_Data$Age))

##Gender
gender_Both <- as.factor(c(EHS_Data$Gender, SHSS_Data$Gender))

summary.function(as.factor(EHS_Data$Gender))
summary.function(as.factor(SHSS_Data$Gender))
summary.function(gender_Both)

gender = matrix( 
  c(38, 13, 32, 15), #Input observed frequencies of males and females
  nrow=2, 
  ncol=2) 

chisq.test(gender)
 
 ##Ethnicity
ethnicity_Both <- as.factor(c(EHS_Data$Race, SHSS_Data$Race))

summary.function(as.factor(EHS_Data$Race))
summary.function(as.factor(SHSS_Data$Race))
summary.function(ethnicity_Both)

##Years in college
college_Both <- as.factor(c(EHS_Data$University_classification, SHSS_Data$University_classification))

summary.function(as.factor(EHS_Data$University_classification))
summary.function(as.factor(SHSS_Data$University_classification))
summary.function(college_Both)

##Marital status
marital_status_Both <- as.factor(c(EHS_Data$Marital_status, SHSS_Data$Marital_status))

summary.function(as.factor(EHS_Data$Marital_status))
summary.function(as.factor(SHSS_Data$Marital_status))
summary.function(marital_status_Both)

##Attrition

attrition = matrix( 
  c(47, 4, 51, 10), #Input observed frequencies of adherence and dropout
  nrow=2, 
  ncol=2) 

chisq.test(attrition)


###################################
### II. Test-Retest Correlation ###
###################################

##First we deal with the EHS

##Specify predictor and criterion
EHS_total1=as.numeric(EHS_Data$EHS_total_score_session1)
EHS_total2=as.numeric(EHS_Data$EHS_total_score_session2)

describe(na.omit(EHS_total1))
describe(na.omit(EHS_total2))

##Normality assumption test
shapiro.test(EHS_total1)
shapiro.test(EHS_total2)

##Inspect visually
plot(x=EHS_total1, y=EHS_total2, main="EHS Scores",     
     xlab="Session 1", ylab="Session 2", pch=19)       # Inspect dataframe visually 
abline(lm(EHS_total1 ~ EHS_total2))             # Add line of best fit to plot

##Create lm object for assumptions testing
EHS_autocorr <- lm(EHS_total1 ~ EHS_total2)

##Plot residuals
residualPlots(lm(EHS_total1~EHS_total2))  

##Test variable association for heteroscedasticity
bptest(EHS_autocorr)  

## Inspect distribution
hist(EHS_total1)
hist(EHS_total2)

qqnorm(EHS_total1, pch = 1, frame = FALSE)
qqline(EHS_total1, col = "steelblue", lwd = 2)

qqnorm(EHS_total2, pch = 1, frame = FALSE)
qqline(EHS_total2, col = "steelblue", lwd = 2)

##Extract correlation coefficient 
cor_EHS <- cor(EHS_total1, EHS_total2, use = "pairwise.complete.obs", 
    method = "spearman")  

##Change correlation method to 'spearman' if GLM assumptions are violated

##Bootstrap a 95%CI for the pearson correlation coeffient
xy <- na.omit(data.frame(cbind(EHS_total1,EHS_total2)))
n = nrow(xy)
Brep = 10000


pearson <- function(d,i=c(1:n)){
  d2 <- d[i,]
  return(cor(d2$EHS_total1,d2$EHS_total2))
}
bootcorr <- boot(data=xy,statistic=pearson,R=Brep) 
bootcorr  
boot.ci(bootcorr,conf=.95)

##Inspect bootstrapped EHS pearson correlation output visually
windows()
par(mfrow=c(2,1))
hist(bootcorr$t,main="Bootstrapped EHS Test-Retest Pearson Correlation")
plot(ecdf(bootcorr$t),main="ECDF of EHS Test-Retest Pearson Correlation")


##Bootstrap spearman correlation for EHS
xy <- na.omit(data.frame(cbind(EHS_total1,EHS_total2)))
n = nrow(xy)
Brep = 10000

 spearman <- function(d,i=c(1:n)){
  d2 <- d[i,]
  return(cor(d2$EHS_total1,d2$EHS_total2, method="spearman"))
}
bootcorr <- boot(data=xy,statistic=spearman,R=Brep, stype="i") 
bootcorr  
boot.ci(bootcorr,conf=.95)

##Inspect bootstrapped EHS spearman correlation output visually
windows()
par(mfrow=c(2,1))
hist(bootcorr$t,main="Bootstrapped EHS Test-Retest Spearman Correlation")
plot(ecdf(bootcorr$t),main="ECDF of EHS Test-Retest Spearman Correlation")


##Now we repeat the process for the SHSS:C

##Specify predictor and criterion
SHSS_total1=as.numeric(SHSS_Data$SHSS_total_score_session1)
SHSS_total2=as.numeric(SHSS_Data$SHSS_total_score_session2)


describe(na.omit(SHSS_total1))
describe(na.omit(SHSS_total2))

##Inspect visually
plot(x=SHSS_total1, y=SHSS_total2, main="SHSS Scores",     
     xlab="Session 1", ylab="Session 2", pch=19)       # Inspect dataframe visually 
abline(lm(SHSS_total1 ~ SHSS_total2))             # Add line of best fit to plot

##Create lm object for assumptions testing
SHSS_autocorr <- lm(SHSS_total1 ~ SHSS_total2)

##Plot residuals
residualPlots(lm(SHSS_total1~SHSS_total2))  

##Test variable association for heteroscedasticity
bptest(SHSS_autocorr)  

##Normality assumption test
shapiro.test(SHSS_total1)
shapiro.test(SHSS_total2)

## Inspect distribution
hist(SHSS_total1)
hist(SHSS_total2)


qqnorm(SHSS_total1, pch = 1, frame = FALSE)
qqline(SHSS_total1, col = "steelblue", lwd = 2)

qqnorm(SHSS_total2, pch = 1, frame = FALSE)
qqline(SHSS_total2, col = "steelblue", lwd = 2)

##Extract correlation coefficient 
cor(SHSS_total1, SHSS_total2, use = "pairwise.complete.obs", 
    method = "spearman")  

##Change correlation method to 'spearman' if GLM assumptions are violated

##Bootstrap a 95%CI for the pearson correlation coeffient
xy <- na.omit(data.frame(cbind(SHSS_total1,SHSS_total2)))
n = nrow(xy)
Brep = 10000


pearson <- function(d,i=c(1:n)){
  d2 <- d[i,]
  return(cor(d2$SHSS_total1,d2$SHSS_total2))
}
bootcorr <- boot(data=xy,statistic=pearson,R=Brep) 
bootcorr  
boot.ci(bootcorr,conf=.95)

##Inspect bootstrapped SHSS pearson correlation output visually
windows()
par(mfrow=c(2,1))
hist(bootcorr$t,main="Bootstrapped SHSS Test-Retest Pearson Correlation")
plot(ecdf(bootcorr$t),main="ECDF of SHSS Test-Retest Pearson Correlation")


##Bootstrap spearman correlation for SHSS
xy <- na.omit(data.frame(cbind(SHSS_total1,SHSS_total2)))
n = nrow(xy)
Brep = 10000

spearman <- function(d,i=c(1:n)){
  d2 <- d[i,]
  return(cor(d2$SHSS_total1,d2$SHSS_total2, method="spearman"))
}
bootcorr <- boot(data=xy,statistic=spearman,R=Brep, stype="i") 
bootcorr  
boot.ci(bootcorr,conf=.95)

##Inspect bootstrapped SHSS spearman correlation output visually
windows()
par(mfrow=c(2,1))
hist(bootcorr$t,main="Bootstrapped SHSS Test-Retest Spearman Correlation")
plot(ecdf(bootcorr$t),main="ECDF of SHSS Test-Retest Spearman Correlation")


#########################################
### III. t-test reassessment effect   ###
#########################################


# inspect distribution
EHS_total_difference = EHS_total1 -EHS_total2
mean(EHS_total_difference)

hist(EHS_total_difference, main="EHS_total_difference", xlab="Plesantness", 
     border="blue", col="green")
qqnorm(EHS_total_difference, pch = 1, frame = FALSE)
qqline(EHS_total_difference, col = "steelblue", lwd = 2)

# t-test
t.test(EHS_total1, EHS_total2, paired = T)

# change t-test to Mann-Whitney-Wilcoxon tests if t-test assumptions are violated
wilcox.test(EHS_total1, EHS_total2, paired = T, alternative = "two.sided", conf.int = TRUE, conf.level=.95)


##Bootstrap effect size hedges g (rm)

n12=length(EHS_total1) + length (EHS_total2)
r <- cor(EHS_total1, EHS_total2, method="spearman")
denom = sqrt(var(EHS_total1) + var(EHS_total2) - 2 * r * sd(EHS_total1) * sd(EHS_total2))
corr = sqrt(2*(1-r))
hedge = 1- (3/ (4*(n12) -9))

scores <- (EHS_total_difference/denom) * corr * hedge

bootES(scores, R=10000, ci.type = "bca")

##Bootstrap unstandardized mean difference
bootES(EHS_total_difference, R=10000, ci.type="basic")
mean(EHS_total_difference)

## SHSS

# inspect distribution
SHSS_total_difference = SHSS_total1 -SHSS_total2
hist(SHSS_total_difference, main="SHSS_total_difference", xlab="Plesantness", 
     border="blue", col="green")
qqnorm(SHSS_total_difference, pch = 1, frame = FALSE)
qqline(SHSS_total_difference, col = "steelblue", lwd = 2)

mean(SHSS_total_difference)
# t-test
t.object <- t.test(SHSS_total1, SHSS_total2, paired = T)

# change t-test to Wilcoxon signed rank test if t-test assumptions are violated
wilcox.test(SHSS_total1, SHSS_total2, paired = T, alternative = "two.sided", conf.int=TRUE, conf.level=.95)

##Bootstrap unstandardized CI

bootES(SHSS_total_difference, R=10000, ci.type="basic")

##Effect size hedges g (rm) 

n12=length(SHSS_total1) + length(SHSS_total2)
r <- cor(SHSS_total1, SHSS_total2, method="spearman")
denom = sqrt(var(SHSS_total1) + var(SHSS_total2) - 2 * r * sd(SHSS_total1) * sd(SHSS_total2))
corr = sqrt(2*(1-r))
hedge = 1- (3/ (4*(n12) -9))

scores <- (SHSS_total_difference/denom) * corr * hedge

bootES(scores, R=10000)

##################################
### IV. scale equivalence test ###
##################################

# aggregate session 1 and 2 hyponotizability scores
EHS_mean = as.numeric(EHS_Data$EHS_total_score_session1) + as.numeric(EHS_Data$EHS_total_score_session2)
EHS_mean = EHS_mean/2
SHSS_mean = as.numeric(SHSS_Data$SHSS_total_score_session1) + as.numeric(SHSS_Data$SHSS_total_score_session2)
SHSS_mean = SHSS_mean/2

mean(EHS_mean) - mean(SHSS_mean)

median(EHS_mean)
median(SHSS_mean)

sd(EHS_mean)
sd(SHSS_mean)

shapiro.test(EHS_mean)
shapiro.test(SHSS_mean)
# inspect distribution
hist(EHS_mean, main="EHS_mean", xlab="Total score", 
     border="blue", col="green")
qqnorm(EHS_mean, pch = 1, frame = FALSE)
qqline(EHS_mean, col = "steelblue", lwd = 2)

hist(SHSS_mean, main="SHSS_mean", xlab="Total score", 
     border="blue", col="green")
qqnorm(SHSS_mean, pch = 1, frame = FALSE)
qqline(SHSS_mean, col = "steelblue", lwd = 2)

##Inspect and test for heterogeneity of variance
var(na.omit(SHSS_mean))
var(na.omit(EHS_mean))
var.test(SHSS_mean, EHS_mean)

# t-test
t.test(SHSS_mean, EHS_mean,
       alternative = "two.sided", paired=FALSE, var.equal = TRUE) 
##Change var.equal to FALSE if var.test is significant

# change t-test to Mann-Whitney-Wilcoxon tests if t-test assumptions are violated
wilcox.test(SHSS_mean, EHS_mean, paired = F, alternative = "two.sided", conf.int = TRUE)


## Bootstrap standardized effect size
n1=length(SHSS_mean)
n2=length(EHS_mean)
means <- c(SHSS_mean, EHS_mean)
levels <- c(SHSS_mean, EHS_mean)
levels[1:n1]="SHSS"
levels[(n1+1):(n1+n2)]="EHS"

data_means <- data.frame(means, levels)


bootES(data_means, R=10000, data.col="means", group.col="levels", 
       effect.type = "hedges.g", contrast=c(SHSS=1, EHS=-1), ci.type="bca")

##Bootstrap unstandardized CI
mean.diff <- EHS_mean - mean(SHSS_mean)
bootES(mean.diff, R=10000, ci.type="basic")

###############################
### V. T-test pleasantness  ###
###############################

##Pool pleasantness ratings from both sessions
EHS_pleasantness = as.numeric(EHS_Data$EHS_Pleasantness_1_overall_session1) + as.numeric(EHS_Data$EHS_Pleasantness_1_overall_session2)
EHS_pleasantness = EHS_pleasantness/2
SHSS_pleasantness = as.numeric(SHSS_Data$SHSS_Pleasantness_1_overall_session1) + as.numeric(SHSS_Data$SHSS_Pleasantness_1_overall_session2)
SHSS_pleasantness = SHSS_pleasantness/2

mean(EHS_pleasantness) - mean(SHSS_pleasantness)
                        
##Inspect EHS pleasantness distribution
hist(EHS_pleasantness, main="EHS Pleasantness", xlab="Plesantness", 
     border="blue", col="green")
qqnorm(EHS_pleasantness, pch = 1, frame = FALSE)
qqline(EHS_pleasantness, col = "steelblue", lwd = 2)

##Inspect SHSS pleasantness distribution                  
hist(SHSS_pleasantness, main="SHSS Pleasantness", xlab="Plesantness", 
     border="blue", col="green")
qqnorm(SHSS_pleasantness, pch = 1, frame = FALSE)
qqline(SHSS_pleasantness, col = "steelblue", lwd = 2)

##Inspect and test for heterogeneity of variance
var(na.omit(EHS_pleasantness))
var(na.omit(SHSS_pleasantness))
var.test(EHS_pleasantness, SHSS_pleasantness)
                      

shapiro.test(EHS_pleasantness)
shapiro.test(SHSS_pleasantness)
##Students t-test for pleasantness ratings
t.test(EHS_pleasantness, SHSS_pleasantness,
alternative = "two.sided", paired=FALSE, var.equal = TRUE) 
##Change var.equal to FALSE if var.test is significant

##Utilize Mann-Whitney-Wilcoxon test if GLM assumptions are violated
wilcox.test(EHS_pleasantness, SHSS_pleasantness, paired = F, alternative = "two.sided")

##Bootstrap unstandardized CI
mean.diff <- EHS_pleasantness - mean(SHSS_pleasantness)
bootES(mean.diff, R=10000, ci.type="basic")

##Bootstrap standardized effect size

n1=length(SHSS_pleasantness)
n2=length(EHS_pleasantness)
means <- c(SHSS_pleasantness, EHS_pleasantness)
levels <- c(SHSS_mean, EHS_mean)
levels[1:n1]="SHSS"
levels[48:98]="EHS"

data_means <- data.frame(means, levels)


bootES(data_means, R=10000, data.col="means", group.col="levels", 
       effect.type = "hedges.g", contrast=c(SHSS=1, EHS=-1), ci.type="bca")
       


##########################################
### VI.  Test-retest difference graph  ###
##########################################

### To begin with, we create a dataset "t2_minus_t1", with 15 rows and 
# 3 columns: 
# Scale (either "ehs" or "shssc"), 
# Retest.score.minus.test.score (-7, -6, ... 0, 1, ...7),
# Frequency (%)

### Let's start by calculating Frequency

##Retest scores minus test scores
EHS_t2_minus_t1 = EHS_total2 -EHS_total1
SHSS_t2_minus_t1 = SHSS_total2 -SHSS_total1

##t2_minus_t1 scores frequency
EHS_t2_minus_t1_f <- table(EHS_t2_minus_t1)
SHSS_t2_minus_t1_f <- table(SHSS_t2_minus_t1)

##t2_minus_t1 scores frequency expressed in percentages (whole numbers only)
EHS_t2_minus_t1_p <- round(EHS_t2_minus_t1_f/51*100)
SHSS_t2_minus_t1_p <- round(SHSS_t2_minus_t1_f/47*100)

### Then we can put together the actual dataset

##Preparing the dataset 1: Making the vectors
Scale <- c("EHS","EHS","EHS", "EHS","EHS","EHS","EHS","EHS","EHS","EHS","SHSS:C","SHSS:C","SHSS:C","SHSS:C","SHSS:C","SHSS:C","SHSS:C","SHSS:C","SHSS:C","SHSS:C")
Retest.score.minus.test.score <- c(-6,-4,-3,-2,-1,0,1,2,3,4,-7,-6,-4,-3,-2,-1,0,1,2,3)
Frequency <- c(EHS_t2_minus_t1_p, SHSS_t2_minus_t1_p)

##Preparing the dataset 2: Assambling the dataset from the created vectors
t2_minus_t1 <- data.frame(Scale, Retest.score.minus.test.score, Frequency)

### Now that the dataset is ready, we can finally move on to the graph

# Test-retest difference graph
ggplot(t2_minus_t1, aes(t2_minus_t1$Retest.score.minus.test.score, t2_minus_t1$Frequency)) +
  geom_bar(stat = "identity") + 
  facet_grid(. ~ t2_minus_t1$Scale) +
  scale_x_continuous (breaks = seq(-7, 7, by = 1)) +
  scale_y_continuous (breaks = seq(0, 40, by = 5)) +
  xlab("Retest score minus test score") +
  ylab("Frequency") +
  geom_vline(aes(xintercept = 0)) +
  theme_bw()
